@using System.Security.Claims;
@using FT_TTMS_WebApplication.ViewModels
@model DashboardViewModel

@* Choices.Js via CDN*@
<link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/choices.js/public/assets/styles/choices.min.css">
<script src="https://cdn.jsdelivr.net/npm/choices.js/public/assets/scripts/choices.min.js"></script>

@* Font Awesome for Styling Buttons *@
<link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/5.15.3/css/all.min.css">

@* Global Variables *@
@{
    // Get the user ID from the Identity
    var userIdFromIdentity = User.FindFirstValue(ClaimTypes.NameIdentifier);

    // Get the user ID from the URL
    var userIdFromURL = ViewContext.RouteData.Values["userId"].ToString() ?? userIdFromIdentity;

    //var userIdFromURL = userIdFromIdentity;

    // Get the start of the current week
    var today = DateTime.Today;
    var currentDayOfWeek = (int)today.DayOfWeek;
    var StartOfCurrentWeek = today.AddDays(-currentDayOfWeek);

    // Convert IEnumerable to List for indexing
    var dayEntriesList = Model.DayEntries.ToList();
    var timeEntriesList = Model.TimeEntries.ToList();
    var leaveEntriesList = Model.LeaveEntries.ToList();
}

@* User Name Display *@
<h2 class="display-6 text-center mb-3">
    Welcome, @Model.FirstName @Model.LastName
</h2>

@* Current Week *@
<h2 class="display-6 text-center mb-3">
    Start of Current Week: @StartOfCurrentWeek.ToString("D")
</h2>

@* Week Picker *@
<form id="weekSelectForm" method="get" asp-action="Index">
    <h2 class="display-6 text-center mb-3">
        Week Picker: <input id="weekPicker" asp-for="WeekSelect" type="date" value="@Model.WeekSelect.ToString("yyyy-MM-dd")" />
        @{
            if (Model.IsCurrentWeek)
            {
                <span>(Current Week)</span>
            }
            else if (Model.IsPrevWeek)
            {
                <span>(Prev. Week)</span>
            }
            else if (Model.IsFutureWeek)
            {
                <span>(Future Week)</span>
            }
        }
    </h2>
</form>

<!-- Add Job Button -->
<button type="button" class="btn btn-outline-info" data-bs-toggle="modal" data-bs-target="#addJobModal">
    Create New Job
</button>

@* Revised Table Implementation *@
<table class="table table-striped">
<thead>
    <tr>
        <th>Day</th>
        <th>Job</th>
        <th>Task</th>
        <th>Duration</th>
        <th>Actions</th>
    </tr>
</thead>
<tbody>
    @for (int i = 0; i < 7; i++)
    {
        var day = Model.WeekSelect.AddDays(i);
        var dayEntries = dayEntriesList.Where(de => de.Date == day.Date).ToList();
        var timeEntries = timeEntriesList.Where(te => te.Date == day.Date).ToList();
        var leaveEntries = leaveEntriesList.Where(le => le.Date == day.Date).ToList();
        var combinedEntries = timeEntries.Cast<object>().Concat(leaveEntries.Cast<object>()).ToList();
        var isFutureDate = day > today;

        <tr>
            <td>
                @day.DayOfWeek (@day.ToShortDateString())
                <br />
                @if (dayEntries.Any())
                {
                    var dayEntry = dayEntries.First();
                    <!-- Clock In/Out Button with data fields -->
                    <button type="button" class="btn btn-outline-primary day-btn" data-bs-toggle="modal" data-bs-target="#clockInOutModal"
                            data-Id="@dayEntry.Id"
                            data-AppUserId="@dayEntry.AppUserId"
                            data-WeekOf="@dayEntry.WeekOf?.ToString("yyyy-MM-dd")"
                            data-Date="@dayEntry.Date?.ToString("yyyy-MM-dd")"
                            data-DayName="@dayEntry.DayName"
                            data-DayStartTime="@dayEntry.DayStartTime"
                            data-DayEndTime="@dayEntry.DayEndTime"
                            data-LunchStartTime="@dayEntry.LunchStartTime"
                            data-LunchEndTime="@dayEntry.LunchEndTime"
                            data-DayDuration="@dayEntry.DayDuration"
                            data-LunchDuration="@dayEntry.LunchDuration"
                            data-WorkDuration="@dayEntry.WorkDuration"
                            onclick="prepareForm(this); calculateDuration(); prepareDeleteDayEntryForm(this);"
                            @(isFutureDate ? "disabled" : "")>
                        Clock In/Out
                    </button>
                    <br />
                    <!-- Day Duration -->
                    <div class="dayDuration">Day Duration: @Model.CalculateDayDuration(day)</div>
                    <!-- Lunch Duration -->
                    <div class="lunchDuration">Lunch Duration: @Model.CalculateLunchDuration(day)</div>
                    <!-- Work Duration -->
                    var workDuration = @Model.CalculateWorkDuration(day);
                    <div class="workDuration">Work Duration: @workDuration</div>
                    <!-- Task Duration -->
                    var taskDuration = @Model.CalculateTaskDuration(day);
                    <!-- Compare and Display Color -->
                    var style = (taskDuration == workDuration ? "color: green;" : "color: red;") + "font-weight: 600;";
                    <div class="taskDuration" style="@style">Task Duration: @taskDuration</div>
                    <div class="leaveDuration">Leave Duration: @Model.CalculateLeaveDuration(day)</div>
                }
                else
                {
                    <br />
                    <!-- Clock In/Out Button with limited data fields -->
                    <button type="button" class="btn btn-outline-primary day-btn" data-bs-toggle="modal" data-bs-target="#clockInOutModal"
                            data-AppUserId="@userIdFromURL"
                            data-WeekOf="@Model.WeekSelect.ToString("yyyy-MM-dd")"
                            data-Date="@day.ToString("yyyy-MM-dd")"
                            data-DayName="@day.DayOfWeek.ToString()"
                            onclick="prepareForm(this);  hideRemoveDayButton(this);"
                            @(isFutureDate ? "disabled" : "")>
                        Clock In/Out
                    </button>
                    @if (timeEntries.Any()){
                        <!-- Task Duration -->
                        <div class="taskDuration">Task Duration: @Model.CalculateTaskDuration(day)</div>
                    }
                    @if (leaveEntries.Any()){
                        <!-- Leave Duration -->
                        <div class="leaveDuration">Leave Duration: @Model.CalculateLeaveDuration(day)</div>
                    }
                }
                <br />
                <!-- Add Leave Button -->
                <button type="button" class="btn btn-outline-secondary add-leave-btn" data-bs-toggle="modal" data-bs-target="#addLeaveModal"
                        data-LeaveEntryAppUserId="@userIdFromURL"
                        data-LeaveEntryWeekOf="@Model.WeekSelect.ToString("yyyy-MM-dd")"
                        data-LeaveEntryDate="@day.ToString("yyyy-MM-dd")"
                        data-LeaveEntryDayName="@day.DayOfWeek.ToString()"
                        onclick="prepareLeaveEntryForm(this)"
                        @(isFutureDate ? "disabled" : "")>
                    Leave Options
                </button>
                <br />
            </td>
            <td>
                @foreach (var entry in combinedEntries)
                {
                    if (entry is TimeEntry timeEntry)
                    {
                        <span class="mb-3 d-block">@timeEntry.Job.JobNumberAndJobName</span>
                    }
                    else if (entry is LeaveEntry leaveEntry)
                    {
                        <span class="mb-3 d-block">@leaveEntry.LeaveType</span>
                    }
                }
            </td>
            <td>
                @foreach (var entry in combinedEntries)
                {
                    if (entry is TimeEntry timeEntry)
                    {
                        <span class="mb-3 d-block">@timeEntry.Duty</span>
                    }
                    else if (entry is LeaveEntry leaveEntry)
                    {
                        <span class="mb-3 d-block">@leaveEntry.LeaveType</span>
                    }
                }
            </td>
            <td>
                @foreach (var entry in combinedEntries)
                {
                    if (entry is TimeEntry timeEntry)
                    {
                        <span class="mb-3 d-block">@timeEntry.Duration</span>
                    }
                    else if (entry is LeaveEntry leaveEntry)
                    {
                        <span class="mb-3 d-block">@leaveEntry.LeaveDuration</span>
                    }
                }
            </td>
            <td>
                @foreach (var entry in combinedEntries)
                {
                    if (entry is TimeEntry timeEntry)
                    {
                        <!-- Edit Time Button -->
                        <button type="button" class="btn btn-outline-warning edit-time-btn" data-bs-toggle="modal" data-bs-target="#addTimeModal"
                                data-TimeEntryId="@timeEntry.Id"
                                data-TimeEntryAppUserId="@timeEntry.AppUserId"
                                data-TimeEntryWeekOf="@timeEntry.WeekOf?.ToString("yyyy-MM-dd")"
                                data-TimeEntryDate="@timeEntry.Date?.ToString("yyyy-MM-dd")"
                                data-TimeEntryDayName="@timeEntry.DayName"
                                data-TimeEntryJob="@timeEntry.JobId"
                                data-TimeEntryDuty="@timeEntry.Duty"
                                data-TimeEntryDuration="@timeEntry.Duration"
                                data-TimeEntryComment="@timeEntry.Comment"
                                onclick="prepareTimeEntryForm(this)"
                                @(isFutureDate ? "disabled" : "")>
                            <i class="fas fa-pencil-alt" data-bs-toggle="tooltip" data-bs-placement="top" title="Edit"></i>
                        </button>
                        <!-- Delete Time Button -->
                        <button type="button" class="btn btn-outline-danger delete-time-btn" data-bs-toggle="modal" data-bs-target="#deleteTimeModal"
                                data-TimeEntryId="@timeEntry.Id"
                                onclick="prepareDeleteTimeEntryForm(this)"
                                @(isFutureDate ? "disabled" : "")>
                            <i class="fas fa-trash" data-bs-toggle="tooltip" data-bs-placement="top" title="Delete"></i>
                        </button>
                    }
                    else if (entry is LeaveEntry leaveEntry)
                    {
                        <!-- Edit Leave Button -->
                        <button type="button" class="btn btn-outline-warning add-leave-btn" data-bs-toggle="modal" data-bs-target="#addLeaveModal"
                                data-LeaveEntryId="@leaveEntry.Id"
                                data-LeaveEntryAppUserId="@userIdFromURL"
                                data-LeaveEntryWeekOf="@Model.WeekSelect.ToString("yyyy-MM-dd")"
                                data-LeaveEntryDate="@day.ToString("yyyy-MM-dd")"
                                data-LeaveEntryDayName="@day.DayOfWeek.ToString()"
                                data-LeaveEntryType="@leaveEntry.LeaveType"
                                data-LeaveEntryDuration="@leaveEntry.LeaveDuration"
                                onclick="prepareLeaveEntryForm(this)"
                                @(isFutureDate ? "disabled" : "")>
                            <i class="fas fa-pencil-alt" data-bs-toggle="tooltip" data-bs-placement="top" title="Edit"></i>
                        </button>
                        <!-- Delete Leave Button -->
                        <button type="button" class="btn btn-outline-danger delete-leave-btn" data-bs-toggle="modal" data-bs-target="#deleteLeaveModal"
                                data-LeaveEntryId="@leaveEntry.Id"
                                onclick="prepareDeleteLeaveEntryForm(this)"
                                @(isFutureDate ? "disabled" : "")>
                            <i class="fas fa-trash" data-bs-toggle="tooltip" data-bs-placement="top" title="Delete"></i>
                        </button>
                    }
                    <br />
                }
                <br />
                <!-- Add Time Button -->
                <button type="button" class="btn btn-outline-success add-time-btn" data-bs-toggle="modal" data-bs-target="#addTimeModal"
                        data-TimeEntryAppUserId="@userIdFromURL"
                        data-TimeEntryWeekOf="@Model.WeekSelect.ToString("yyyy-MM-dd")"
                        data-TimeEntryDate="@day.ToString("yyyy-MM-dd")"
                        data-TimeEntryDayName="@day.DayOfWeek.ToString()"
                        onclick="prepareTimeEntryForm(this)"
                        @(isFutureDate ? "disabled" : "")>
                    <i class="fas fa-plus-circle" data-bs-toggle="tooltip" data-bs-placement="top" title="Add Task"></i>
                </button>
            </td>
        </tr>
    }
</tbody>
    <tfoot>
        <tr class="totalHours">
            <td colspan="3">Total</td>
            <td>@Model.CalculateTotalHoursForWeek(Model.WeekSelect)</td>
            <td></td>
        </tr>
    </tfoot>
</table>

<!-- Create Job Modal -->
<div class="modal fade" id="addJobModal" tabindex="-1" aria-labelledby="addJobModalLabel" aria-hidden="true">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="addJobModalLabel">Add Job</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <form asp-action="AddJob" method="post">
                <div class="modal-body">
                    @if (TempData["ErrorMessage"] != null)
                    {
                        <div class="alert alert-danger alert-dismissible fade show" role="alert">
                            @TempData["ErrorMessage"]
                            <button type="button" class="btn-close" data-bs-dismiss="alert" aria-label="Close"></button>
                        </div>
                    }
                    @if (TempData["SuccessMessage"] != null)
                    {
                        <div class="alert alert-success alert-dismissible fade show" role="alert">
                            @TempData["SuccessMessage"]
                            <button type="button" class="btn-close" data-bs-dismiss="alert" aria-label="Close"></button>
                        </div>
                    }
                    <div class="mb-3">
                        <label asp-for="JobModel.JobNumber" class="form-label">Job Number:</label>
                        <input id="jobNumber" asp-for="JobModel.JobNumber" type="text" class="form-control" required>
                        <span asp-validation-for="JobModel.JobNumber" class="text-danger"></span>
                    </div>
                    <div class="mb-3">
                        <label asp-for="JobModel.JobName" class="form-label">Job Name:</label>
                        <input id="jobName" asp-for="JobModel.JobName" type="text" class="form-control" required>
                        <span asp-validation-for="JobModel.JobName" class="text-danger"></span>
                    </div>
                    <div class="mb-3">
                        <label asp-for="JobModel.JobNumberAndJobName" class="form-label">Job Number and Job Name:</label>
                        <input readonly id="jobNumberAndJobName" asp-for="JobModel.JobNumberAndJobName" type="text" class="form-control" required>
                        <span asp-validation-for="JobModel.JobNumberAndJobName" class="text-danger"></span>
                    </div>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Close</button>
                    <button type="submit" class="btn btn-primary">Save changes</button>
                </div>
            </form>
        </div>
    </div>
</div>

<!-- Add Day Modal -->
<div class="modal fade" id="clockInOutModal" tabindex="-1" aria-labelledby="clockInOutModalLabel" aria-hidden="true">
  <div class="modal-dialog">
    <div class="modal-content">
      <div class="modal-header">
        <h5 class="modal-title" id="clockInOutModalLabel">Clock IN/OUT</h5>
        <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
      </div>
        <!-- Deletion Form -->
        <div class="d-flex justify-content-center pt-3">
            <form method="post" asp-action="DeleteDay">
                <input type="hidden" name="id" id="deleteDayEntryId" value="">
                <button id="removeDayEntryButton" type="submit" class="btn btn-danger">Remove Day Entry</button>
            </form>
        </div>
      <form id="myDayForm" method="post" asp-action="ClockInOut">
        <div class="modal-body">
            <div class="mb-3">
                <label hidden asp-for="DayEntry.Id" class="form-label">Day Entry ID:</label>
                <input hidden id="Id" asp-for="DayEntry.Id" type="text" class="form-control">
            </div>
            <div class="mb-3">
                <label hidden asp-for="DayEntry.AppUserId" class="form-label">App User ID:</label>
                <input hidden id="appUserId" asp-for="DayEntry.AppUserId" value="@userIdFromURL" type="text" class="form-control">
            </div>
            <div class="mb-3">
                <label hidden asp-for="DayEntry.WeekOf" class="form-label">Week Of:</label>
                <input hidden id="weekOf" asp-for="DayEntry.WeekOf" type="date" class="form-control">
            </div>
            <div class="mb-3">
                <label asp-for="DayEntry.Date" class="form-label">Date:</label>
                <input readonly id="date" asp-for="DayEntry.Date" type="date" class="form-control">
            </div>
            <div class="mb-3">
                <label asp-for="DayEntry.DayName" class="form-label">Day Name:</label>
                <input readonly id="dayName" asp-for="DayEntry.DayName" type="text" class="form-control">
            </div>
            <div class="mb-3">
                <label asp-for="DayEntry.DayStartTime" class="form-label"></label>
                <input id="dayStartTime" asp-for="DayEntry.DayStartTime" type="time" class="form-control" required>
                <span class="text-danger" asp-validation-for="DayEntry.DayStartTime"></span>
            </div>
            <div class="mb-3">
                <label asp-for="DayEntry.DayEndTime" class="form-label"></label>
                <input id="dayEndTime" asp-for="DayEntry.DayEndTime" type="time" class="form-control" required>
                <span class="text-danger" asp-validation-for="DayEntry.DayEndTime"></span>
            </div>
            <div class="mb-3">
                <label asp-for="DayEntry.LunchStartTime" class="form-label"></label>
                <input id="lunchStartTime" asp-for="DayEntry.LunchStartTime" type="time" class="form-control">
            </div>
            <div class="mb-3">
                <label asp-for="DayEntry.LunchEndTime" class="form-label"></label>
                <input id="lunchEndTime" asp-for="DayEntry.LunchEndTime" type="time" class="form-control">
            </div>
            <div class="mb-3">
                <label hidden asp-for="DayEntry.DayDuration" class="form-label"></label>
                <input hidden id="dayDuration" asp-for="DayEntry.DayDuration" class="form-control">
            </div>
			
			<div class="mb-3">
                <label hidden asp-for="DayEntry.LunchDuration" class="form-label"></label>
                <input hidden id="lunchDuration" asp-for="DayEntry.LunchDuration" class="form-control">
            </div>
			
			<div class="mb-3">
                <label hidden asp-for="DayEntry.WorkDuration" class="form-label"></label>
                <input hidden id="workDuration" asp-for="DayEntry.WorkDuration" class="form-control">
            </div>
        </div>
        <div class="modal-footer">
            <button type="button" class="btn btn-warning" id="clearDayValues">Clear Values</button>
            <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Close</button>
            <button type="submit" class="btn btn-primary">Save Changes</button>
        </div>
      </form>
        <div class="widgetDurationContainers">
            <div id="dayDurationDisplay"></div>
            <div id="lunchDurationDisplay"></div>
            <div id="workDurationDisplay"></div>
        </div>
    </div>
  </div>
</div>


<!-- Add Time Modal -->
<div class="modal fade" id="addTimeModal" tabindex="-1" aria-labelledby="addTimeModalLabel" aria-hidden="true">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="addTimeModalLabel">Add Time Entry</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <form id="myTaskForm" asp-action="AddTime" method="post">
                <div class="modal-body">
                    <div class="mb-3">
                        <label hidden asp-for="TimeEntry.Id" class="form-label">Time Entry ID:</label>
                        <input hidden id="timeEntryId" asp-for="TimeEntry.Id" type="text" class="form-control">
                    </div>
                    <div class="mb-3">
                        <label hidden asp-for="TimeEntry.AppUserId" class="form-label">App User ID:</label>
                        <input hidden id="timeEntryAppUserId" asp-for="TimeEntry.AppUserId" value="@userIdFromURL" type="text" class="form-control">
                    </div>
                    <div class="mb-3">
                        <label hidden asp-for="TimeEntry.WeekOf" class="form-label">Week Of:</label>
                        <input hidden id="timeEntryWeekOf" asp-for="TimeEntry.WeekOf" type="date" class="form-control">
                    </div>
                    <div class="mb-3">
                        <label asp-for="TimeEntry.Date" class="form-label">Date:</label>
                        <input readonly id="timeEntryDate" asp-for="TimeEntry.Date" type="date" class="form-control">
                    </div>
                    <div class="mb-3">
                        <label asp-for="TimeEntry.DayName" class="form-label">Day Name:</label>
                        <input readonly id="timeEntryDayName" asp-for="TimeEntry.DayName" type="text" class="form-control">
                    </div>
                    <div class="form-group">
                        <label asp-for="TimeEntry.JobId">Job</label>
                        <select id="timeEntryJob" asp-for="TimeEntry.JobId" class="form-control JobAddSelect">
                            <option value="">Select a job</option>
                            @{
                                // Define the priority list
                                var priorityJobs = new List<string>
                                {
                                    "24100 - AUTO GENERATED JOB",
                                    "24100-2 - FiberTrak Misc",
                                    "99400 - Yard Training"
                                };

                                // Render priority items first
                                foreach (var priorityJob in priorityJobs)
                                {
                                    foreach (var job in Model.Jobs)
                                    {
                                        if (job.JobNumberAndJobName == priorityJob)
                                        {
                                            <option value="@job.Id">@job.JobNumberAndJobName</option>
                                        }
                                    }
                                }

                                // Render the rest of the items
                                foreach (var job in Model.Jobs)
                                {
                                    if (!priorityJobs.Contains(job.JobNumberAndJobName))
                                    {
                                        <option value="@job.Id">@job.JobNumberAndJobName</option>
                                    }
                                }
                            }
                        </select>
                        <span asp-validation-for="TimeEntry.JobId" class="text-danger"></span>
                    </div>
                    <div class="form-group">
                        <label asp-for="TimeEntry.Duty">Task</label>
                        <select id="timeEntryDuty" asp-for="TimeEntry.Duty" class="form-control DutyAddSelect">
                            <option value="">Select a task</option>
                            @foreach (var duty in Model.Duties)
                            {
                                <option value="@duty.DutyDescription">@duty.DutyDescription</option>
                            }
                        </select>
                        <span asp-validation-for="TimeEntry.Duty" class="text-danger"></span>
                    </div>
                    <div class="mb-3">
                        <label asp-for="TimeEntry.Duration" class="form-label"></label>
                        <input id="timeEntryDuration" asp-for="TimeEntry.Duration" class="form-control" type="number" step="0.25" onchange="roundToQuarter(this)" required/>
                        <span asp-validation-for="TimeEntry.Duration" class="text-danger"></span>
                    </div>
                    <div class="mb-3">
                        <label asp-for="TimeEntry.Comment" class="form-label"></label>
                        <textarea id="timeEntryComment" asp-for="TimeEntry.Comment" class="form-control"></textarea>
                        <span asp-validation-for="TimeEntry.Comment" class="text-danger"></span>
                    </div>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-success" id="copyLastEntry">Copy Last Entry</button>
                    <button type="button" class="btn btn-warning" id="clearTimeValues">Clear Values</button>
                    <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Close</button>
                    <button type="submit" class="btn btn-primary">Save Changes</button>
                </div>
            </form>
        </div>
    </div>
</div>

<!-- Delete Time Modal -->
<div class="modal fade" id="deleteTimeModal" tabindex="-1" aria-labelledby="deleteTimeModalLabel" aria-hidden="true">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="deleteTimeModalLabel">Confirm Delete</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body">
                Are you sure you want to delete this time entry?
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
                <form asp-action="DeleteTime" method="post" >
                    <input type="hidden" name="id" id="deleteTimeEntryId" value="">
                    <button type="submit" class="btn btn-danger">Delete</button>
                </form>
            </div>
        </div>
    </div>
</div>

<!-- Add Leave Modal -->
<div class="modal fade" id="addLeaveModal" tabindex="-1" aria-labelledby="addLeaveModalLabel" aria-hidden="true">
  <div class="modal-dialog">
    <div class="modal-content">
      <div class="modal-header">
        <h5 class="modal-title" id="addLeaveModalLabel">Add Leave</h5>
        <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
      </div>
      <form id="myLeaveForm" method="post" asp-action="AddLeave">
        <div class="modal-body">
            <div class="mb-3">
                    <label hidden asp-for="LeaveEntry.Id" class="form-label">Leave Entry ID:</label>
                    <input hidden id="leaveEntryId" asp-for="LeaveEntry.Id" type="text" class="form-control">
            </div>
            <div class="mb-3">
                    <label hidden asp-for="LeaveEntry.AppUserId" class="form-label">App User ID:</label>
                    <input hidden id="leaveEntryAppUserId" asp-for="LeaveEntry.AppUserId" value="@userIdFromURL" type="text" class="form-control">
            </div>
            <div class="mb-3">
                    <label hidden asp-for="LeaveEntry.WeekOf" class="form-label">Week Of:</label>
                    <input hidden id="leaveEntryWeekOf" asp-for="LeaveEntry.WeekOf" type="date" class="form-control">
            </div>
            <div class="mb-3">
                <label asp-for="LeaveEntry.Date" class="form-label">Date:</label>
                <input readonly id="leaveEntryDate" asp-for="LeaveEntry.Date" type="date" class="form-control">
            </div>
            <div class="mb-3">
                <label asp-for="LeaveEntry.DayName" class="form-label">Day Name:</label>
                <input readonly id="leaveEntryDayName" asp-for="LeaveEntry.DayName" type="text" class="form-control">
            </div>
            <div class="mb-3">
                <label asp-for="LeaveEntry.LeaveType" class="form-label">Leave Type:</label>
                <select id="leaveEntryType" asp-for="LeaveEntry.LeaveType" class="form-select" required>
                    <option value="" selected disabled>Pick a Leave Type</option>
                    <option value="Sick Day">Sick Day</option>
                    <option value="Holiday">Holiday</option>
                    <option value="PTO">PTO</option>
                    @* <option value="UPTO">UPTO</option> *@
                </select>
                <span asp-validation-for="LeaveEntry.LeaveType" class="text-danger"></span>
            </div>
            <div class="mb-3">
                <label asp-for="LeaveEntry.LeaveDuration" class="form-label">Leave Duration:</label>
                <input id="leaveEntryDuration" asp-for="LeaveEntry.LeaveDuration" type="text" class="form-control" type="number" step="0.25" onchange="roundToQuarter(this)" required>
                <span asp-validation-for="LeaveEntry.LeaveDuration" class="text-danger"></span>
            </div>
        </div>
        <div class="modal-footer">
            <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Close</button>
            <button type="submit" class="btn btn-primary">Save Changes</button>
        </div>
      </form>
    </div>
  </div>
</div>

<!-- Delete Leave Modal -->
<div class="modal fade" id="deleteLeaveModal" tabindex="-1" aria-labelledby="deleteLeaveModalLabel" aria-hidden="true">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="deleteLeaveModalLabel">Confirm Delete</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body">
                Are you sure you want to delete this leave entry?
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
                <form asp-action="DeleteLeave" method="post" >
                    <input type="hidden" name="id" id="deleteLeaveEntryId" value="">
                    <button type="submit" class="btn btn-danger">Delete</button>
                </form>
            </div>
        </div>
    </div>
</div>

@section Scripts {
    <script>
        // Display Modal Messages for Add Job
        $(document).ready(function () {
            var errorMessage = '@TempData["ErrorMessage"]';
            var successMessage = '@TempData["SuccessMessage"]';

            if (errorMessage) {
                $('#addJobModal').modal('show');
            }

            if (successMessage) {
                alert(successMessage);
            }
        });

        // Copy Last Entry
        document.getElementById('copyLastEntry').addEventListener('click', function () {
            var lastJob = '@(Model.LastTimeEntry?.JobId)';
            var lastDuty = '@(Model.LastTimeEntry?.Duty)';

            console.log('Job to copy: ' + lastJob);
            console.log('Duty to copy: ' + lastDuty);

            if (lastJob) {
                jobSelect.setChoiceByValue(lastJob);
            }

            if (lastDuty) {
                dutySelect.setChoiceByValue(lastDuty);
            }
        });

        // Initialize Choices.js on Your Dropdowns
        document.addEventListener('DOMContentLoaded', function() {
            const jobSelectElement = document.getElementById('timeEntryJob');
            const dutySelectElement = document.getElementById('timeEntryDuty');

            new Choices(jobSelectElement, {
                removeItemButton: true,
                searchEnabled: true,
                searchChoices: true,
                searchResultLimit: 5,
                placeholderValue: 'Select a job',
                shouldSort: false,
            });

            new Choices(dutySelectElement, {
                removeItemButton: true,
                searchEnabled: true,
                searchChoices: true,
                searchResultLimit: 5,
                placeholderValue: 'Select a task',
                shouldSort: false,
            });
        });

        // Create Choices instances outside DOMContentLoaded event
        var jobSelect = new Choices('#timeEntryJob', { searchEnabled: true, shouldSort: false });
        var dutySelect = new Choices('#timeEntryDuty', { searchEnabled: true, shouldSort: false });

        function prepareLeaveEntryForm(button) {
            const LeaveEntryId = button.getAttribute('data-LeaveEntryId');
            const LeaveEntryAppUserId = button.getAttribute('data-LeaveEntryAppUserId');
            const LeaveEntryWeekOf = button.getAttribute('data-LeaveEntryWeekOf');
            const LeaveEntryDate = button.getAttribute('data-LeaveEntryDate');
            const LeaveEntryDayName = button.getAttribute('data-LeaveEntryDayName');
            const LeaveEntryType = button.getAttribute('data-LeaveEntryType');
            const LeaveEntryDuration = button.getAttribute('data-LeaveEntryDuration');

            console.log("LeaveEntryId: ", LeaveEntryId);
            console.log("LeaveEntryAppUserId: ", LeaveEntryAppUserId);
            console.log("LeaveEntryWeekOf: ", LeaveEntryWeekOf);
            console.log("LeaveEntryDate: ", LeaveEntryDate);
            console.log("LeaveEntryDayName: ", LeaveEntryDayName);
            console.log("LeaveEntryType: ", LeaveEntryType);
            console.log("LeaveEntryDuration: ", LeaveEntryDuration);

            const leaveEntryTypeElement = document.getElementById('leaveEntryType');
            const leaveEntryDurationElement = document.getElementById('leaveEntryDuration');

            if (LeaveEntryId) { // If there's an ID, it's an existing entry
                document.getElementById('leaveEntryId').value = LeaveEntryId;
                document.getElementById('leaveEntryAppUserId').value = LeaveEntryAppUserId;
                document.getElementById('leaveEntryWeekOf').value = LeaveEntryWeekOf;
                document.getElementById('leaveEntryDate').value = LeaveEntryDate;
                document.getElementById('leaveEntryDayName').value = LeaveEntryDayName;
                leaveEntryTypeElement.value = LeaveEntryType;
                leaveEntryDurationElement.value = LeaveEntryDuration;
            } else { // New entry
                document.getElementById('leaveEntryId').value = '';
                document.getElementById('leaveEntryAppUserId').value = LeaveEntryAppUserId;
                document.getElementById('leaveEntryWeekOf').value = LeaveEntryWeekOf;
                document.getElementById('leaveEntryDate').value = LeaveEntryDate;
                document.getElementById('leaveEntryDayName').value = LeaveEntryDayName;
                leaveEntryTypeElement.value = '';
                leaveEntryDurationElement.value = '';
            }

            // Set readonly for Sick Day and Holiday
            if (LeaveEntryType === 'Sick Day' || LeaveEntryType === 'Holiday') {
                leaveEntryDurationElement.setAttribute('readonly', true);
            } else {
                leaveEntryDurationElement.removeAttribute('readonly');
            }
        }

        function prepareTimeEntryForm(button) {
            const TimeEntryId = button.getAttribute('data-TimeEntryId');
            const TimeEntryAppUserId = button.getAttribute('data-TimeEntryAppUserId');
            const TimeEntryWeekOf = button.getAttribute('data-TimeEntryWeekOf');
            const TimeEntryDate = button.getAttribute('data-TimeEntryDate');
            const TimeEntryDayName = button.getAttribute('data-TimeEntryDayName');
            const TimeEntryJob = button.getAttribute('data-TimeEntryJob');
            const TimeEntryDuty = button.getAttribute('data-TimeEntryDuty');
            const TimeEntryDuration = button.getAttribute('data-TimeEntryDuration');
            const TimeEntryComment = button.getAttribute('data-TimeEntryComment');

            console.log("TimeEntryId: ", TimeEntryId);
            console.log("TimeEntryAppUserId: ", TimeEntryAppUserId);
            console.log("TimeEntryWeekOf: ", TimeEntryWeekOf);
            console.log("TimeEntryDate: ", TimeEntryDate);
            console.log("TimeEntryDayName: ", TimeEntryDayName);
            console.log("TimeEntryJob: ", TimeEntryJob);
            console.log("TimeEntryTask: ", TimeEntryDuty);
            console.log("TimeEntryDuration: ", TimeEntryDuration);
            console.log("TimeEntryComment: ", TimeEntryComment);

            if (TimeEntryId) { // If there's an ID, it's an existing entry
                document.getElementById('timeEntryId').value = TimeEntryId;
                document.getElementById('timeEntryAppUserId').value = TimeEntryAppUserId;
                document.getElementById('timeEntryWeekOf').value = TimeEntryWeekOf;
                document.getElementById('timeEntryDate').value = TimeEntryDate;
                document.getElementById('timeEntryDayName').value = TimeEntryDayName;

                // Set the value of Job and Task using Choices API
                jobSelect.setChoiceByValue(TimeEntryJob);
                dutySelect.setChoiceByValue(TimeEntryDuty);

                document.getElementById('timeEntryDuration').value = TimeEntryDuration;
                document.getElementById('timeEntryComment').value = TimeEntryComment;
            } else { // New entry
                document.getElementById('timeEntryId').value = '';
                document.getElementById('timeEntryAppUserId').value = TimeEntryAppUserId;
                document.getElementById('timeEntryWeekOf').value = TimeEntryWeekOf;
                document.getElementById('timeEntryDate').value = TimeEntryDate;
                document.getElementById('timeEntryDayName').value = TimeEntryDayName;

                // Set the value of Job and Task using Choices API
                jobSelect.setChoiceByValue('');
                dutySelect.setChoiceByValue('');
                
                document.getElementById('timeEntryDuration').value = '';
                document.getElementById('timeEntryComment').value = '';
            }

            var leaveType = element.getAttribute('data-TimeEntryLeaveType'); // Make sure to add this attribute in your button

            // Check if the leave type is "Sick Day" or "Holiday"
            if (leaveType === 'Sick Day' || leaveType === 'Holiday') {
                document.getElementById('leaveEntryDuration').setAttribute('readonly', true);
                document.getElementById('leaveEntryDuration').value = 8; // Assuming you want to set it to 8 by default
            } else {
                document.getElementById('leaveEntryDuration').removeAttribute('readonly');
            }
        }
        
        
        function prepareForm(button) {
                const Id = button.getAttribute('data-Id');
                const AppUserId = button.getAttribute('data-AppUserId');
                const WeekOf = button.getAttribute('data-WeekOf');
                const Date = button.getAttribute('data-Date');
                const DayName = button.getAttribute('data-DayName');
                const DayStartTime = button.getAttribute('data-DayStartTime');
                const DayEndTime = button.getAttribute('data-DayEndTime');
                const LunchStartTime = button.getAttribute('data-LunchStartTime');
                const LunchEndTime = button.getAttribute('data-LunchEndTime');
                const DayDuration = button.getAttribute('data-DayDuration');
                const LunchDuration = button.getAttribute('data-LunchDuration');
                const WorkDuration = button.getAttribute('data-WorkDuration');

                console.log("Id: ", Id);
                console.log("AppUserId: ", AppUserId);
                console.log("WeekOf: ", WeekOf);
                console.log("Date: ", Date);
                console.log("DayName: ", DayName);
                console.log("DayStartTime: ", DayStartTime);
                console.log("DayEndTime: ", DayEndTime);
                console.log("LunchStartTime: ", LunchStartTime);
                console.log("LunchEndTime: ", LunchEndTime);
                console.log("DayDuration: ", DayDuration);
                console.log("LunchDuration: ", LunchDuration);
                console.log("WorkDuration: ", WorkDuration);

            if (Id) { // If there's an ID, it's an existing entry
                document.getElementById('Id').value = Id;
                document.getElementById('appUserId').value = AppUserId;
                document.getElementById('weekOf').value = WeekOf;
                document.getElementById('date').value = Date;
                document.getElementById('dayName').value = DayName;
                document.getElementById('dayStartTime').value = DayStartTime;
                document.getElementById('dayEndTime').value = DayEndTime;
                document.getElementById('lunchStartTime').value = LunchStartTime;
                document.getElementById('lunchEndTime').value = LunchEndTime;
                document.getElementById('dayDuration').value = DayDuration;
                document.getElementById('lunchDuration').value = LunchDuration;
                document.getElementById('workDuration').value = WorkDuration;
            } else { // New entry
                document.getElementById('Id').value = '';
                document.getElementById('appUserId').value = AppUserId;
                document.getElementById('weekOf').value = WeekOf;
                document.getElementById('date').value = Date;
                document.getElementById('dayName').value = DayName;
                document.getElementById('dayStartTime').value = '';
                document.getElementById('dayEndTime').value = '';
                document.getElementById('lunchStartTime').value = '';
                document.getElementById('lunchEndTime').value = '';
                document.getElementById('dayDuration').value = '';
                document.getElementById('lunchDuration').value = '';
                document.getElementById('workDuration').value = '';
            }
        }

        document.getElementById('weekPicker').addEventListener('change', function () {
            document.getElementById('weekSelectForm').submit();
        });

        document.getElementById('dayStartTime').addEventListener('change', calculateDuration);
        document.getElementById('dayEndTime').addEventListener('change', calculateDuration);
        document.getElementById('lunchStartTime').addEventListener('change', calculateDuration);
        document.getElementById('lunchEndTime').addEventListener('change', calculateDuration);

        function calculateDuration() {
            var dayStartTime = document.getElementById('dayStartTime').value;
            var dayEndTime = document.getElementById('dayEndTime').value;
            var lunchStartTime = document.getElementById('lunchStartTime').value;
            var lunchEndTime = document.getElementById('lunchEndTime').value;
            var dayDuration, lunchDuration, workDuration;

            if (dayStartTime && dayEndTime) {
                dayDuration = calculateDurationTimes(dayStartTime, dayEndTime);
                // Set the value
                document.getElementById('dayDuration').value = dayDuration;
                // Display the value
                document.getElementById('dayDurationDisplay').textContent = 'Day Duration: ' + dayDuration + ' hours';
            }

            if (lunchStartTime && lunchEndTime) {
                lunchDuration = calculateDurationTimes(lunchStartTime, lunchEndTime);
                // Set the value
                document.getElementById('lunchDuration').value = lunchDuration;
                // Display the value
                document.getElementById('lunchDurationDisplay').textContent = 'Lunch Duration: ' + lunchDuration + ' hours';
            }

            if (dayDuration !== undefined && lunchDuration !== undefined) {
                workDuration = dayDuration - lunchDuration;
                // Set the value
                document.getElementById('workDuration').value = workDuration;
                // Display the value
                document.getElementById('workDurationDisplay').textContent = 'Work Duration: ' + workDuration + ' hours';
            }
        }

        function calculateDurationTimes(startTime, endTime) {
            var start = new Date("1970-1-1 " + startTime);
            var end = new Date("1970-1-1 " + endTime);
            if (end <= start) {
                end.setDate(end.getDate() + 1);
            }
            var difference = end - start;
            var hours = difference / 3600000;
            // Use roundToQuarter here to round the hours
            return roundToQuarter(hours);
        }

        // Updated roundToQuarter function to work with numbers directly
        function roundToQuarter(hours) {
            return (Math.round(hours * 4) / 4).toFixed(2);
        }

        // Delete Time Entry
        function prepareDeleteTimeEntryForm(element) {
            var timeEntryId = element.getAttribute('data-TimeEntryId');
            document.getElementById('deleteTimeEntryId').value = timeEntryId;
        }

        // Delete Leave Entry
        function prepareDeleteLeaveEntryForm(element) {
            var leaveEntryId = element.getAttribute('data-LeaveEntryId');
            document.getElementById('deleteLeaveEntryId').value = leaveEntryId;
        }

        // Delete Day Entry
        function prepareDeleteDayEntryForm(element) {
            var dayEntryId = element.getAttribute('data-Id');
            document.getElementById('deleteDayEntryId').value = dayEntryId;
        }

        // Hide Remove Day Entry Button if DayEntry.Id is empty
        function hideRemoveDayButton(element) {
            // Get the value of the DayEntry.Id input field
            var dayEntryId = document.getElementById('Id').value;

            // Get the "Remove Day Entry" button by its ID or class
            var removeButton = document.getElementById('removeDayEntryButton');

            // Check if the DayEntry.Id field is empty
            if (dayEntryId.trim() === '') {
                // Hide the "Remove Day Entry" button if the field is empty
                removeButton.style.display = 'none';
            } else {
                // Show the "Remove Day Entry" button if the field is not empty
                removeButton.style.display = 'inline';
            }
        }

        // Add Job Number and Job Name together
        document.addEventListener('DOMContentLoaded', function () {
            const jobNumberInput = document.getElementById('jobNumber');
            const jobNameInput = document.getElementById('jobName');
            const jobNumberAndJobNameInput = document.getElementById('jobNumberAndJobName');

            function updateJobNumberAndJobName() {
                jobNumberAndJobNameInput.value = jobNumberInput.value + ' - ' + jobNameInput.value;
            }

            jobNumberInput.addEventListener('input', updateJobNumberAndJobName);
            jobNameInput.addEventListener('input', updateJobNumberAndJobName);
        });

        // Validate Job and Task Selection
        document.addEventListener("DOMContentLoaded", function() {
            var taskForm = document.getElementById('myTaskForm');

            taskForm && taskForm.addEventListener('submit', function(event) {
                var jobSelect = document.getElementById('timeEntryJob');
                var dutySelect = document.getElementById('timeEntryDuty');

                if (jobSelect.value === "" || dutySelect.value === "") {
                    event.preventDefault();
                    alert('Please select both a job and a task before submitting.');
                }
            });
        });

        // Validate Day and Lunch Times
        document.addEventListener('DOMContentLoaded', function() {
            const form = document.getElementById('myDayForm');
            const dayStartTime = document.querySelector('#dayStartTime');
            const dayEndTime = document.querySelector('#dayEndTime');
            const lunchStartTime = document.querySelector('#lunchStartTime');
            const lunchEndTime = document.querySelector('#lunchEndTime');

            form.addEventListener('submit', function(event) {
                // Check if one field is filled and the other is not
                if ((lunchStartTime.value && !lunchEndTime.value) || (!lunchStartTime.value && lunchEndTime.value)) {
                    event.preventDefault(); // Prevent form submission
                    // Alert the user
                    alert('Please enter both lunch start and end times, or leave both blank.');
                    return; // Exit the function early
                }

                // Only proceed with lunch duration check if both lunch start and end times are provided
                if (lunchStartTime.value && lunchEndTime.value) {
                    // Use calculateDurationTimes function to get day and lunch durations
                    const dayDuration = calculateDurationTimes(dayStartTime.value, dayEndTime.value);
                    const lunchDuration = calculateDurationTimes(lunchStartTime.value, lunchEndTime.value);

                    // Convert durations to numbers for comparison
                    const dayDurationHours = parseFloat(dayDuration);
                    const lunchDurationHours = parseFloat(lunchDuration);

                    // Prevent form submission if lunch duration is greater than day duration
                    if (lunchDurationHours > dayDurationHours) {
                        event.preventDefault(); // Prevent form submission
                        alert('Lunch duration cannot be greater than the day duration.');
                    }
                }
                // If both lunch start and end times are empty, no further action is needed
            });
        });

        // Clear Day Values Button
        document.addEventListener('DOMContentLoaded', function() {
            const clearDayValuesButton = document.getElementById('clearDayValues');

            clearDayValuesButton.addEventListener('click', function() {

                // Reset their values
                document.getElementById('dayStartTime').value = '';
                document.getElementById('dayEndTime').value = '';
                document.getElementById('lunchStartTime').value = '';
                document.getElementById('lunchEndTime').value = '';

            });
        });

        // Clear Time Values Button
        document.addEventListener('DOMContentLoaded', function() {
            const clearTimeValuesButton = document.getElementById('clearTimeValues');

            clearTimeValuesButton.addEventListener('click', function() {
                // Select all time-related input fields
                jobSelect.setChoiceByValue('');
                dutySelect.setChoiceByValue('');
                const timeEntryDuration = document.getElementById('timeEntryDuration');
                const timeEntryComment = document.getElementById('timeEntryComment');

                // Reset their values
                timeEntryDuration.value = ''; // Clear duration input
                timeEntryComment.value = ''; // Clear comment input

            });
        });

        // Leave Type Select
        document.addEventListener('DOMContentLoaded', function() {
            const leaveTypeSelect = document.getElementById('leaveEntryType');
            const leaveDurationInput = document.getElementById('leaveEntryDuration');

            leaveTypeSelect.addEventListener('change', function() {
                const selectedValue = this.value;
                if (selectedValue === 'Sick Day' || selectedValue === 'Holiday') {
                    leaveDurationInput.value = 8;
                    leaveDurationInput.setAttribute('readonly', true);
                } else {
                    leaveDurationInput.value = ''; // Clear the value or set it to a default
                    leaveDurationInput.removeAttribute('readonly');
                }
            });
        });

        // Initialize Bootstrap tooltips
        var tooltipTriggerList = [].slice.call(document.querySelectorAll('[data-bs-toggle="tooltip"]'))
        var tooltipList = tooltipTriggerList.map(function (tooltipTriggerEl) {
        return new bootstrap.Tooltip(tooltipTriggerEl)
        })
    </script>
}